# "Реализуем события предметной области в Spring Framework"

## Введение

О чем этот пост?
* реализация событий предметной области в Spring
* amqp

DDD - что это такое? Максимально приближенное к предметной области моделирование с помощью доступных средств языка программирования и сопутсствующих технологий. 
Основные инструменты DDD - это агрегаты и события. Первые отвечают за непротиворечивость данных во всех операциях предметной области.
Агрегаты обестпечивают выполнения т.н. инвариантов модели. Например, при добавлении товара общая стоимость будущего заказа должна равняться сумме цен товаров в корзине. 

## Агрераты и события

Агрегаты - сущности или группы объектов, которые изменяются в одной транзакции. 
Основное правило агрегатов гласит - изменять не более одного агрегата во время одной транзакции. Если в результате уточнения модели
вы приходите к тому, что в результате одной атомарной операции вам нужно изменить состояние более чем одного агрегата, то это либо повод задумаьбся об адекватности модели, либо пересмотреть реальную необходимость атомарности. 

Пример с интернет-магазином. Возможный вариант построения - Пользователь-has many orders. Мы могли бы использовать пользователя как агрегат. В таком случае можно атомарно изменить состояние самого пользователя (например, его лицевой счет) и добавить заказ. 
Операция user.buyItems(List<CatalogItem> items);
Такая модель может оказаться не совсем удачной, если нужно обращаться к самим заказам отдельно. Например, у самого заказа есть состояние  "статус". При создании статус = "pending". 

Когда в модели появляются события?

## Обеспецение непротиворецивости и Отложенная консистентность 

"Отложенная консистентность"  c помощью событий. Избавляемся от неделимости кода.

## Реализация

# Общая структура приложения: domain, infrastructure (как набор гейтвеев для внешних сервисов), application (бизнес-транзакции), UI (web mvc). 

# События модели - класс реализация по Вернону.

# События в application-layer. Подписываемся на события из модели с помощью AOP. 

# Spring integration - отправка события через amqp. Конфигурация amqp с пояснениями. 

# Отправка события только после завершения транзакции. 

# Как добавить listeners? Аннотации и кастомный dispatcher.

## Пример использования - оплата ордера и добавления позиция заказа к юзеру через сообщения.